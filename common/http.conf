access_log syslog:server=unix:/dev/log;

include mime.types;
default_type application/octet-stream;
sendfile on;
keepalive_timeout 65;

# Without this, cosocket-based code in worker
# initialization cannot resolve leader.mesos.
resolver 127.0.0.1:61053 ipv6=off;

lua_package_path '$prefix/conf/?.lua;;';

# Loading the auth module in the global Lua VM in the master process is a
# requirement, so that code is executed under the user that spawns the
# master process instead of 'nobody' (which workers operate under).
init_by_lua '
    util = require "common.util"

    local use_auth = os.getenv("ADMINROUTER_ACTIVATE_AUTH_MODULE")
    if use_auth ~= "true" then
        ngx.log(
            ngx.NOTICE,
            "ADMINROUTER_ACTIVATE_AUTH_MODULE not `true`. " ..
            "Use dummy module."
            )
        auth = {}
        auth.validate_jwt_or_exit = function() return end
    else
        ngx.log(ngx.NOTICE, "Use auth module.")
        auth = require "common.auth"
    end

    HOST_IP = os.getenv("HOST_IP")
    if HOST_IP == nil or util.verify_ip(HOST_IP) == false then
        if HOST_IP ~= nil then
            ngx.log(ngx.ERR, "HOST_IP var is not a valid ipv4: " .. HOST_IP)
        end
        -- This will cause Lua logic to always respond with 5XX status to the
        -- requests that rely on this variable.
        HOST_IP = "unknown"
    end
    ngx.log(ngx.NOTICE, "Local Mesos Master IP: " .. HOST_IP)

    historyservice = require "master.history-service".init();
';

upstream pkgpanda {
    server unix:/run/dcos/pkgpanda-api.sock;
}
