access_log syslog:server=unix:/dev/log;

include mime.types;
default_type application/octet-stream;
sendfile on;
keepalive_timeout 65;

lua_package_path '$prefix/conf/?.lua;;';

# Loading the auth module in the global Lua VM in the master process is a
# requirement, so that code is executed under the user that spawns the
# master process instead of 'nobody' (which workers operate under).
init_by_lua_block {
    local use_auth = os.getenv("ADMINROUTER_ACTIVATE_AUTH_MODULE")
    if use_auth ~= "true" then
        ngx.log(
            ngx.NOTICE,
            "ADMINROUTER_ACTIVATE_AUTH_MODULE not `true`. " ..
            "Use dummy module."
            )
        auth = {}
        auth.validate_jwt_or_exit = function() return end
    else
        ngx.log(ngx.NOTICE, "Use auth module.")
        auth = require "common.auth"
    end

    UPSTREAM_MESOS = os.getenv("UPSTREAM_MESOS")
    if UPSTREAM_MESOS == nil then
        UPSTREAM_MESOS = "http://leader.mesos:5050"
    end
    ngx.log(ngx.NOTICE, "Mesos upstream: " .. UPSTREAM_MESOS)

    UPSTREAM_MARATHON = os.getenv("UPSTREAM_MARATHON")
    if UPSTREAM_MARATHON == nil then
        UPSTREAM_MARATHON = "http://127.0.0.1:8080"
    end
    ngx.log(ngx.NOTICE, "Marathon upstream: " .. UPSTREAM_MARATHON)
}

upstream pkgpanda {
    server unix:/run/dcos/pkgpanda-api.sock;
}
