include common/main.conf;


http {
    include common/http.conf;

    client_max_body_size 1024M;

    # Without this, cosocket-based code in worker
    # initialization cannot resolve leader.mesos.
    resolver 127.0.0.1:61053 valid=60s;

    upstream mesos {
        server leader.mesos:5050;
    }

    upstream marathon {
        server master.mesos:8080;
    }

    upstream cosmos {
        server localhost:7070;
    }

    upstream dcos_history_service {
        server 127.0.0.1:15055;
    }

    upstream mesos_dns {
        server 127.0.0.1:8123;
    }

    upstream exhibitor {
        server 127.0.0.1:8181;
    }

    upstream bouncer {
        server 127.0.0.1:8101;
    }

    upstream dddt {
        server localhost:1050;
    }

    upstream metrics {
        server unix:/run/dcos/dcos-metrics-master.sock;
    }

    upstream navstar {
        server localhost:62080;
    }

    proxy_cache_path /tmp/nginx-mesos-cache levels=1:2 keys_zone=mesos:1m inactive=10m;

    lua_shared_dict mesos_state_cache 100m;
    lua_shared_dict shmlocks 100k;

    init_worker_by_lua '
        local statecache = require "master.mesosstatecache"
        statecache.periodically_poll_mesos_state()
    ';

    server {
        ssl_certificate common/snakeoil.crt;
        ssl_certificate_key common/snakeoil.key;

        server_name master.mesos leader.mesos;

        include common/server.conf;

        listen 80 default_server;
        listen 443 ssl default_server;

        root /opt/mesosphere/active/dcos-ui/usr;

        location = /login {
            set_by_lua $oauth_client_id 'return os.getenv("OAUTH_CLIENT_ID")';
            set_by_lua $oauth_auth_redirector 'return os.getenv("OAUTH_AUTH_REDIRECTOR")';
            set_by_lua $cluster_id 'return util.get_stripped_first_line_from_file("/var/lib/dcos/cluster-id")';
            # existing query string parameters will be appended by nginx
            rewrite ^ $oauth_auth_redirector$uri?client=$oauth_client_id&cluster_id=$cluster_id redirect;
        }

        location /acs/api/v1/auth/ {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_pass http://bouncer;
        }

        location /acs/api/v1 {
            # Enforce access restriction to Auth API.
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_pass http://bouncer;
            # Instruct user agent to not cache the response.
            # Ref: http://stackoverflow.com/a/2068407/145400
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma no-cache;
            add_header Expires 0;
        }

        location = /mesos {
            rewrite ^/mesos$ $scheme://$http_host/mesos/ permanent;
        }

        location /mesos/ {
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_set_header Host $http_host;
            proxy_pass http://mesos/;
        }

        location /package/ {
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_set_header Host $http_host;
            proxy_pass http://cosmos/package/;
        }

        location /capabilities {
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_set_header Host $http_host;
            proxy_pass http://cosmos/capabilities;
        }

        location /cache/master/ {
            add_header X-Cache-Status $upstream_cache_status;
            proxy_pass http://mesos/master/;
            proxy_cache mesos;
            proxy_cache_bypass  $http_cache_control;
            proxy_cache_lock on;
            proxy_cache_valid 200 5s;
        }

        location = /exhibitor {
            rewrite ^/exhibitor$ $scheme://$http_host/exhibitor/ permanent;
        }

        location /exhibitor/ {
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_pass http://exhibitor/;
            proxy_redirect http://$proxy_host/ $scheme://$http_host/exhibitor/;
        }

        location /navstar/lashup/key {
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_set_header Host $http_host;
            proxy_pass http://navstar/lashup/key;
        }

        location ~ ^/(slave|agent)/(?<agentid>[0-9a-zA-Z-]+)(?<url>.*)$ {
            access_by_lua 'auth.validate_jwt_or_exit()';
            set $agentaddr '';
            set $agentport '';

            more_clear_input_headers Accept-Encoding;
            rewrite ^/(slave|agent)/[0-9a-zA-Z-]+/.*$ $url break;
            rewrite_by_lua_file conf/master/agent.lua;

            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://$agentaddr:$agentport;

            # Supports chunked encoding and stream for debugging API
            proxy_http_version 1.1;
            proxy_request_buffering off;
            proxy_buffering off;
        }

        location ~ ^/service/(?<serviceid>[0-9a-zA-Z-.]+)$ {
            # Append slash and 301-redirect.
            rewrite ^/service/(.*)$ /service/$1/ permanent;
        }

        location ~ ^/service/(?<serviceid>[0-9a-zA-Z-.]+)/(?<url>.*) {
            set $serviceurl '';
            set $servicescheme '';

            access_by_lua 'auth.validate_jwt_or_exit()';

            more_clear_input_headers Accept-Encoding;
            rewrite ^/service/[0-9a-zA-Z-.]+/?.*$ /$url break;
            rewrite_by_lua_file conf/master/service.lua;

            proxy_set_header        Host $http_host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            proxy_pass $serviceurl;
            proxy_redirect $servicescheme://$host/service/$serviceid/ /service/$serviceid/;
            proxy_redirect $servicescheme://$host/ /service/$serviceid/;
            proxy_redirect / /service/$serviceid/;

            # Disable buffering to allow real-time protocols
            proxy_buffering off;

            # Support web sockets and SPDY upgrades
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /metadata {
            access_by_lua 'auth.validate_jwt_or_exit()';
            content_by_lua_file conf/master/metadata.lua;
        }

        # TODO split this into its own file
        location /dcos-metadata/ui-config.json {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_pass http://bouncer;
        }

        location /dcos-metadata/dcos-version.json {
            # Allow non-authed access for the UI.
            alias /opt/mesosphere/active/dcos-metadata/etc/dcos-version.json;
        }

        location /dcos-metadata/ {
            access_by_lua 'auth.validate_jwt_or_exit()';
            alias /opt/mesosphere/active/dcos-metadata/etc/;
        }

        # /marathon(/) is a legacy, deprecated location. The
        # officially supported path is /service/marathon(/).
        location = /marathon {
            rewrite ^/marathon$ $scheme://$http_host/marathon/ permanent;
        }

        # TODO(cmaloney): Make the Web UI work in a subdirectory.
        location /marathon/ {
            # Enforce access restriction. Auth-wise, treat /marathon*
            # equivalently to /service/marathon*.
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_set_header Host $http_host;
            proxy_pass http://marathon/;
        }

        location /pkgpanda/active.buildinfo.full.json {
            access_by_lua 'auth.validate_jwt_or_exit()';
            add_header Cache-Control "no-cache";
            alias /opt/mesosphere/active.buildinfo.full.json;
        }

        location /dcos-history-service/ {
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_pass http://dcos_history_service/;
        }

        location = /mesos_dns {
            rewrite ^/mesos_dns$ $scheme://$http_host/mesos_dns/ permanent;
        }

        location /mesos_dns/ {
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_set_header Host $http_host;
            proxy_pass http://mesos_dns/;

        }

        location /system/health/v1 {
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_pass http://dddt;
        }

        location /pkgpanda/ {
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_pass http://pkgpanda/;
            proxy_redirect http://$http_host/ /pkgpanda/;
        }

        location /system/v1/logs/v1/ {
            access_by_lua 'auth.validate_jwt_or_exit()';
            include common/server-sent-events.conf;
            include common/proxy-headers.conf;
            proxy_pass http://log/;
        }

        location ~ ^/system/v1/agent/(?<agentid>[0-9a-zA-Z-]+)/logs/v1/(?<url>.*)$ {
            access_by_lua 'auth.validate_jwt_or_exit()';
            set $agentaddr '';
            more_clear_input_headers Accept-Encoding;
            rewrite ^/(slave|agent)/[0-9a-zA-Z-]+/.*$ $url break;
            rewrite_by_lua_file conf/master/agent.lua;

            include common/server-sent-events.conf;
            include common/proxy-headers.conf;

            proxy_pass http://$agentaddr:61001/system/v1/logs/v1/$url$is_args$query_string;
        }

        location ~ ^/system/v1/agent/(?<agentid>[0-9a-zA-Z-]+)(?<url>.*)$ {
            access_by_lua 'auth.validate_jwt_or_exit()';
            set $agentaddr '';
            more_clear_input_headers Accept-Encoding;
            rewrite ^/(slave|agent)/[0-9a-zA-Z-]+/.*$ $url break;
            rewrite_by_lua_file conf/master/agent.lua;

            include common/proxy-headers.conf;

            proxy_pass http://$agentaddr:61001/system/v1/$url$is_args$query_string;
        }
        
        location /system/v1/metrics/ {
            access_by_lua 'auth.validate_jwt_or_exit()';
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
            proxy_pass http://metrics/;
        }
    }
}
